# https://quizlet.com/_aidjl7?x=1jqt&i=426q4l 

data structure
data storage that enable efficient access and modification

static
fixed size of indexable item

dynamic
allow increase or decrease in size

contiguous memory
memory adjacent to item; sequential order

non contiguous memory
memory not adjacent to item; scattered order

linear data structure
utilize contiguous memory

non linear data structure
utilize non contiguous memory

implicit function
available tool for programmer

explicit function
manual action done through programmer

node
unit of data structure

index
positive number that correspond with item position

pointer
adress that indicate next item in structure

head node
first node in structure

tail node
last node in structure

array
collection of same type data item

linked list
sequence of node where each item contain pointer to next item

doubly linked list
sequence of node where each item contain pointer to next item and previous item

circular linked list
sequence of node where last item contain pointer to first item

stack
last in first out; push to insert, pop to delete

queue
first in first out; enqueue to insert, dequeue to delete

priority queue
first in first out in alphabetical order

tree
vertex and edge linked together with pointer to left child and right child in hierarchal order

rooted tree
single lineage from root node

unrooted tree
no common lineage from root node

binary tree
each parent node contain maximum of two children node

search tree
left subtree store value less than root node; right subtree contain value greater than root node

self balance tree
minimize number of node beneath parent node when insertion or deletion operation occur

segment tree
store information over segment and answer queries

trie
associative array of string; each node define letter

AVL tree
each subtree differ in height of maximum one node

red black tree
all root node black; children of red node black

fenwick tree
each node store value of prefix sum

graph
finite set of vertice and edge connect pair of item

weighted graph
number associated with all edge

unweighted graph
all edge are equal value

directed graph
order of vertice pair matter; directed edge

undirected graph
order of vertice pair do not matter; undirected edge

heap
all parent node compare to children node

max heap
parent node greater than children node

min heap
parent node less than children node

hash
connect item to whole number in fixed set

hash map
key value pair into direct access table

disjoint set
collection of non duplicate item
